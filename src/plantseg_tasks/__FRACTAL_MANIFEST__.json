{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "H5 Converter Task",
      "executable_non_parallel": "convert_h5_to_ome_zarr.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "AxisScaleModel": {
            "description": "Input model for the axis scale to be used in the conversion.",
            "properties": {
              "axis_name": {
                "default": "c",
                "enum": [
                  "c",
                  "z",
                  "y",
                  "x"
                ],
                "title": "Axis Name",
                "type": "string",
                "description": "The name of the axis, must be one of 'c', 'z', 'y', 'x'."
              },
              "scale": {
                "default": 1.0,
                "minimum": 0.0,
                "title": "Scale",
                "type": "number",
                "description": "The scale is used to set the resolution of the axis. It must corresponds to the voxel size for that axis."
              }
            },
            "title": "AxisScaleModel",
            "type": "object"
          },
          "CustomAxisInputModel": {
            "description": "Input model for the custom axis to be used in the conversion.",
            "properties": {
              "axis": {
                "items": {
                  "$ref": "#/$defs/AxisScaleModel"
                },
                "title": "Axis",
                "type": "array",
                "description": "The list of axis to be used in the conversion. The order of the axis in the list should be the same as the order of the axis in the image. Must be the same length as the number of axis in the image."
              },
              "spatial_units": {
                "default": "micrometer",
                "enum": [
                  "angstrom",
                  "attometer",
                  "centimeter",
                  "decimeter",
                  "exameter",
                  "femtometer",
                  "foot",
                  "gigameter",
                  "hectometer",
                  "inch",
                  "kilometer",
                  "megameter",
                  "meter",
                  "micrometer",
                  "mile",
                  "millimeter",
                  "nanometer",
                  "parsec",
                  "petameter",
                  "picometer",
                  "terameter",
                  "yard",
                  "yoctometer",
                  "yottameter",
                  "zeptometer",
                  "zettameter"
                ],
                "title": "Spatial Units",
                "type": "string",
                "description": "The spatial units of the axis."
              },
              "channel_names": {
                "items": {
                  "type": "string"
                },
                "title": "Channel Names",
                "type": "array",
                "description": "The list of channel names. Must be the same length as the number of channels in the image."
              }
            },
            "title": "CustomAxisInputModel",
            "type": "object"
          },
          "OMEZarrBuilderParams": {
            "description": "Parameters for the OME-Zarr builder.",
            "properties": {
              "number_multiscale": {
                "default": 4,
                "minimum": 0,
                "title": "Number Multiscale",
                "type": "integer",
                "description": "The number of multiscale levels to create. Default is 4."
              },
              "scaling_factor_XY": {
                "default": 2,
                "maximum": 10,
                "minimum": 1,
                "title": "Scaling Factor XY",
                "type": "integer",
                "description": "The factor to downsample the XY plane. Default is 2, meaning every layer is half the size over XY."
              },
              "scaling_factor_Z": {
                "default": 1,
                "maximum": 10,
                "minimum": 1,
                "title": "Scaling Factor Z",
                "type": "integer",
                "description": "The factor to downsample the Z plane. Default is 1, no scaling on Z."
              },
              "create_all_ome_axis": {
                "default": true,
                "title": "Create All Ome Axis",
                "type": "boolean",
                "description": "Whether to create all OME axis. Default is True, meaning that missing axis will be created with a sigleton dimension."
              }
            },
            "title": "OMEZarrBuilderParams",
            "type": "object"
          },
          "VALID_IMAGE_LAYOUT": {
            "description": "Valid image layouts.",
            "enum": [
              "TCZYX",
              "CZYX",
              "ZCYX",
              "ZYX",
              "CYX",
              "YX"
            ],
            "title": "VALID_IMAGE_LAYOUT",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of URLs to the OME-Zarr files. Not used in this task."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "Output path to save the OME-Zarr file."
          },
          "input_path": {
            "title": "Input Path",
            "type": "string",
            "description": "Input path to the H5 file, or a folder containing H5 files."
          },
          "image_key": {
            "default": "raw",
            "title": "Image Key",
            "type": "string",
            "description": "The image key in the H5 file where the image is stored."
          },
          "image_layout": {
            "allOf": [
              {
                "$ref": "#/$defs/VALID_IMAGE_LAYOUT"
              }
            ],
            "default": "ZYX",
            "title": "Image Layout",
            "description": "The layout of the image data. Must be one of 'ZYX', 'YX', 'XY', 'CZYX', 'ZCYX'."
          },
          "label_key": {
            "title": "Label Key",
            "type": "string",
            "description": "The label key in the H5 file where a label/segmentation is stored."
          },
          "new_image_key": {
            "title": "New Image Key",
            "type": "string",
            "description": "New key for the image data to be stored in the OME-Zarr. If not provided, the original key will be used."
          },
          "new_label_key": {
            "title": "New Label Key",
            "type": "string",
            "description": "New key for the label data to be stored in the OME-Zarr. If not provided, the original key will be used."
          },
          "custom_axis": {
            "$ref": "#/$defs/CustomAxisInputModel",
            "title": "Custom Axis",
            "description": "Custom axes to add to the OME-Zarr file. This field will override the default axes resolution and units found in the H5 file."
          },
          "ome_zarr_parameters": {
            "$ref": "#/$defs/OMEZarrBuilderParams",
            "title": "Ome Zarr Parameters",
            "description": "Parameters for the OME-Zarr builder."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "input_path"
        ],
        "type": "object",
        "title": "ConvertH5ToOmeZarr"
      },
      "docs_info": "## convert_h5_to_ome_zarr\nH5 to OME-Zarr converter task.\n"
    },
    {
      "name": "Tiff Converter Task",
      "executable_non_parallel": "convert_tiff_to_ome_zarr.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "$defs": {
          "AxisScaleModel": {
            "description": "Input model for the axis scale to be used in the conversion.",
            "properties": {
              "axis_name": {
                "default": "c",
                "enum": [
                  "c",
                  "z",
                  "y",
                  "x"
                ],
                "title": "Axis Name",
                "type": "string",
                "description": "The name of the axis, must be one of 'c', 'z', 'y', 'x'."
              },
              "scale": {
                "default": 1.0,
                "minimum": 0.0,
                "title": "Scale",
                "type": "number",
                "description": "The scale is used to set the resolution of the axis. It must corresponds to the voxel size for that axis."
              }
            },
            "title": "AxisScaleModel",
            "type": "object"
          },
          "CustomAxisInputModel": {
            "description": "Input model for the custom axis to be used in the conversion.",
            "properties": {
              "axis": {
                "items": {
                  "$ref": "#/$defs/AxisScaleModel"
                },
                "title": "Axis",
                "type": "array",
                "description": "The list of axis to be used in the conversion. The order of the axis in the list should be the same as the order of the axis in the image. Must be the same length as the number of axis in the image."
              },
              "spatial_units": {
                "default": "micrometer",
                "enum": [
                  "angstrom",
                  "attometer",
                  "centimeter",
                  "decimeter",
                  "exameter",
                  "femtometer",
                  "foot",
                  "gigameter",
                  "hectometer",
                  "inch",
                  "kilometer",
                  "megameter",
                  "meter",
                  "micrometer",
                  "mile",
                  "millimeter",
                  "nanometer",
                  "parsec",
                  "petameter",
                  "picometer",
                  "terameter",
                  "yard",
                  "yoctometer",
                  "yottameter",
                  "zeptometer",
                  "zettameter"
                ],
                "title": "Spatial Units",
                "type": "string",
                "description": "The spatial units of the axis."
              },
              "channel_names": {
                "items": {
                  "type": "string"
                },
                "title": "Channel Names",
                "type": "array",
                "description": "The list of channel names. Must be the same length as the number of channels in the image."
              }
            },
            "title": "CustomAxisInputModel",
            "type": "object"
          },
          "OMEZarrBuilderParams": {
            "description": "Parameters for the OME-Zarr builder.",
            "properties": {
              "number_multiscale": {
                "default": 4,
                "minimum": 0,
                "title": "Number Multiscale",
                "type": "integer",
                "description": "The number of multiscale levels to create. Default is 4."
              },
              "scaling_factor_XY": {
                "default": 2,
                "maximum": 10,
                "minimum": 1,
                "title": "Scaling Factor XY",
                "type": "integer",
                "description": "The factor to downsample the XY plane. Default is 2, meaning every layer is half the size over XY."
              },
              "scaling_factor_Z": {
                "default": 1,
                "maximum": 10,
                "minimum": 1,
                "title": "Scaling Factor Z",
                "type": "integer",
                "description": "The factor to downsample the Z plane. Default is 1, no scaling on Z."
              },
              "create_all_ome_axis": {
                "default": true,
                "title": "Create All Ome Axis",
                "type": "boolean",
                "description": "Whether to create all OME axis. Default is True, meaning that missing axis will be created with a sigleton dimension."
              }
            },
            "title": "OMEZarrBuilderParams",
            "type": "object"
          },
          "VALID_IMAGE_LAYOUT": {
            "description": "Valid image layouts.",
            "enum": [
              "TCZYX",
              "CZYX",
              "ZCYX",
              "ZYX",
              "CYX",
              "YX"
            ],
            "title": "VALID_IMAGE_LAYOUT",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_urls": {
            "items": {
              "type": "string"
            },
            "title": "Zarr Urls",
            "type": "array",
            "description": "List of URLs to the OME-Zarr files. Not used in this task."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "Output path to save the OME-Zarr file."
          },
          "image_path": {
            "title": "Image Path",
            "type": "string",
            "description": "Input path to the TIFF file, or a folder containing TIFF files."
          },
          "image_layout": {
            "allOf": [
              {
                "$ref": "#/$defs/VALID_IMAGE_LAYOUT"
              }
            ],
            "default": "ZYX",
            "title": "Image Layout",
            "description": "The layout of the image data."
          },
          "label_path": {
            "title": "Label Path",
            "type": "string",
            "description": "Input path to the label TIFF file. Folder containing TIFF files is not yet supported."
          },
          "new_image_key": {
            "default": "raw",
            "title": "New Image Key",
            "type": "string",
            "description": "New key for the image data to be stored in the OME-Zarr."
          },
          "new_label_key": {
            "default": "label",
            "title": "New Label Key",
            "type": "string",
            "description": "New key for the label data to be stored in the OME-Zarr."
          },
          "custom_axis": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomAxisInputModel"
              }
            ],
            "default": {
              "axis": [
                {
                  "axis_name": "z",
                  "scale": 1.0
                },
                {
                  "axis_name": "y",
                  "scale": 1.0
                },
                {
                  "axis_name": "x",
                  "scale": 1.0
                }
              ],
              "spatial_units": "micrometer",
              "channel_names": [
                "Boundary"
              ]
            },
            "title": "Custom Axis",
            "description": "Custom axes to add to the OME-Zarr file. This field will override the default axes resolution and units found in the TIFF file."
          },
          "ome_zarr_parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/OMEZarrBuilderParams"
              }
            ],
            "default": {
              "number_multiscale": 4,
              "scaling_factor_XY": 2,
              "scaling_factor_Z": 1,
              "create_all_ome_axis": true
            },
            "title": "Ome Zarr Parameters",
            "description": "Parameters for the OME-Zarr builder."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "image_path"
        ],
        "type": "object",
        "title": "ConvertTiffToOmeZarr"
      },
      "docs_info": "## convert_tiff_to_ome_zarr\nTIFF to OME-Zarr converter task.\n"
    },
    {
      "name": "PlantSeg Workflow Task",
      "executable_parallel": "plantseg_workflow.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "Device": {
            "description": "Device to use for CNN predictions.",
            "enum": [
              "cpu",
              "cuda"
            ],
            "title": "Device",
            "type": "string"
          },
          "DynamicBioIOModels": {
            "description": "Select a model from the BioImageIO Zoo.",
            "enum": [
              "affable-shark",
              "ambitious-ant",
              "ambitious-sloth",
              "amiable-crocodile",
              "chatty-frog",
              "conscientious-seashell",
              "courteous-otter",
              "creative-panda",
              "determined-chipmunk",
              "discreet-rooster",
              "easy-going-sauropod",
              "efficient-chipmunk",
              "emotional-cricket",
              "fearless-crab",
              "hiding-blowfish",
              "hiding-tiger",
              "humorous-owl",
              "impartial-shark",
              "impartial-shrimp",
              "independent-shrimp",
              "joyful-deer",
              "kind-seashell",
              "laid-back-lobster",
              "loyal-parrot",
              "loyal-squid",
              "modest-octopus",
              "naked-microbe",
              "nice-peacock",
              "noisy-fish",
              "noisy-hedgehog",
              "non-judgemental-eagle",
              "organized-badger",
              "organized-cricket",
              "passionate-t-rex",
              "pioneering-rhino",
              "placid-llama",
              "polite-pig",
              "powerful-chipmunk",
              "powerful-fish",
              "shivering-raccoon",
              "straightforward-crocodile",
              "thoughtful-turtle",
              "wild-whale",
              "willing-hedgehog"
            ],
            "title": "DynamicBioIOModels",
            "type": "string"
          },
          "DynamicallyGeneratedModel": {
            "description": "Select a model from the PlantSeg Zoo.",
            "enum": [
              "generic_confocal_3D_unet",
              "generic_light_sheet_3D_unet",
              "confocal_3D_unet_ovules_ds1x",
              "confocal_3D_unet_ovules_ds2x",
              "confocal_3D_unet_ovules_ds3x",
              "confocal_2D_unet_ovules_ds2x",
              "lightsheet_3D_unet_root_ds1x",
              "lightsheet_3D_unet_root_ds2x",
              "lightsheet_3D_unet_root_ds3x",
              "lightsheet_2D_unet_root_ds1x",
              "lightsheet_3D_unet_root_nuclei_ds1x",
              "lightsheet_2D_unet_root_nuclei_ds1x",
              "confocal_2D_unet_sa_meristem_cells",
              "confocal_3D_unet_sa_meristem_cells",
              "lightsheet_3D_unet_mouse_embryo_cells",
              "confocal_3D_unet_mouse_embryo_nuclei",
              "PlantSeg_3Dnuc_platinum"
            ],
            "title": "DynamicallyGeneratedModel",
            "type": "string"
          },
          "ModelsPool": {
            "description": "Select if the model is sourced from PlantSegZoo or BioImageIO.",
            "enum": [
              "PlantSegZoo",
              "BioImageIO",
              "LocalModel"
            ],
            "title": "ModelsPool",
            "type": "string"
          },
          "PlantSegPredictionsModel": {
            "description": "Input model for PlantSeg predictions.",
            "properties": {
              "model_source": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ModelsPool"
                  }
                ],
                "default": "PlantSegZoo",
                "title": "Model_Source",
                "description": "Define which of the following fields to use."
              },
              "plantsegzoo_name": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DynamicallyGeneratedModel"
                  }
                ],
                "default": "generic_confocal_3D_unet",
                "title": "Plantsegzoo_Name",
                "description": "The model name from the PlantSeg Zoo. This field is only used if model_source is PlantSegZoo."
              },
              "bioimageio_name": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DynamicBioIOModels"
                  }
                ],
                "default": "affable-shark",
                "title": "Bioimageio_Name",
                "description": "The model name from the BioImageIO Zoo. This field is only used if model_source is BioImageIO."
              },
              "local_model_path": {
                "title": "Local Model Path",
                "type": "string",
                "description": "The path to the local model. This field is only used if model_source is LocalModel."
              },
              "device": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Device"
                  }
                ],
                "default": "cuda",
                "title": "Device",
                "description": "The device to use for predictions."
              },
              "patch": {
                "default": [
                  80,
                  160,
                  160
                ],
                "items": {
                  "type": "integer"
                },
                "title": "Patch",
                "type": "array",
                "description": "The patch size."
              },
              "skip": {
                "default": false,
                "title": "Skip",
                "type": "boolean",
                "description": "Whether to skip the predictions."
              }
            },
            "title": "PlantSegPredictionsModel",
            "type": "object"
          },
          "PlantSegSegmentationModel": {
            "description": "Input model for PlantSeg segmentations.",
            "properties": {
              "ws_threshold": {
                "default": 0.5,
                "title": "Ws Threshold",
                "type": "number",
                "description": "The threshold for the watershed."
              },
              "segmentation_type": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SegmentationType"
                  }
                ],
                "default": "gasp",
                "title": "Segmentation Method",
                "description": "The segmentation method to use. Must be one of 'gasp', 'mutex_ws', 'multicut', 'dt_watershed'."
              },
              "beta": {
                "default": 0.6,
                "title": "Beta",
                "type": "number",
                "description": "The beta value."
              },
              "post_minsize": {
                "default": 100,
                "title": "Post Minsize",
                "type": "integer",
                "description": "The minimum size."
              }
            },
            "title": "PlantSegSegmentationModel",
            "type": "object"
          },
          "SegmentationType": {
            "description": "PlantSeg segmentation function to use.",
            "enum": [
              "gasp",
              "mutex_ws",
              "multicut",
              "dt_watershed"
            ],
            "title": "SegmentationType",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "The URL of the Zarr file."
          },
          "channel": {
            "default": 0,
            "title": "Channel",
            "type": "integer",
            "description": "Select the input channel to use."
          },
          "level": {
            "default": 0,
            "title": "Level",
            "type": "integer",
            "description": "Select at which pyramid level to run the workflow."
          },
          "table_name": {
            "title": "Table Name",
            "type": "string",
            "description": "The name of a roi table to use."
          },
          "prediction_model": {
            "$ref": "#/$defs/PlantSegPredictionsModel",
            "title": "Prediction Model",
            "description": "Parameters for the prediction model."
          },
          "segmentation_model": {
            "$ref": "#/$defs/PlantSegSegmentationModel",
            "title": "Segmentation Model",
            "description": "Parameters for the segmentation model."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "The name of the label to create with the plantseg segmentation."
          }
        },
        "required": [
          "zarr_url",
          "prediction_model",
          "segmentation_model"
        ],
        "type": "object",
        "title": "PlantsegWorkflow"
      },
      "docs_info": "## plantseg_workflow\nFull PlantSeg workflow.\n\nThis function runs the full PlantSeg workflow on a OME-Zarr file.\n"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2"
}
